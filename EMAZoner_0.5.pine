//@version=6
indicator("Trend Analyzer EMA Only", overlay=true)

// Input parameters
emaFastLength = input.int(9, "Fast EMA Length", minval=1)
emaSlowLength = input.int(21, "Slow EMA Length", minval=1)
minTrendBars = input.int(3, "Min Trend Bars", minval=1)
neutralThreshold = input.float(0.001, "Neutral EMA diff threshold (%)", minval=0.0001, step=0.0001)
offsetType = input.string("ATR", "Label offset type", options=["ATR", "% of price", "Dynamic"])
offsetATRmult = input.float(1.5, "Label offset (ATR multiplier)", minval=0.1, step=0.1)
offsetPct = input.float(0.5, "Label offset (% of price)", minval=0.01, step=0.01)
dynMin = input.float(0.2, "Dynamic offset min (%)", minval=0.01, step=0.01)
dynMax = input.float(1.5, "Dynamic offset max (%)", minval=0.1, step=0.01)
showPeakLabels = input.bool(true, "Show PEAK labels", group="Display")

// EMAs
emaFast = ta.ema(close, emaFastLength)
emaSlow = ta.ema(close, emaSlowLength)

// EMA slopes
emaFastSlope = emaFast - emaFast[1]
emaSlowSlope = emaSlow - emaSlow[1]

// EMA difference (relative to price)
diff = math.abs(emaFast - emaSlow)
diffPct = diff / close

// Trend logic
isUptrend = emaFast > emaSlow and emaFastSlope > 0 and emaSlowSlope > 0 and diffPct > neutralThreshold
isDowntrend = emaFast < emaSlow and emaFastSlope < 0 and emaSlowSlope < 0 and diffPct > neutralThreshold
isNeutral = not isUptrend and not isDowntrend

// Multi-timeframe trend logic
f_tfTrend(_tf) =>
    _emaFast = request.security(syminfo.tickerid, _tf, ta.ema(close, emaFastLength))
    _emaSlow = request.security(syminfo.tickerid, _tf, ta.ema(close, emaSlowLength))
    _emaFastSlope = request.security(syminfo.tickerid, _tf, ta.ema(close, emaFastLength) - ta.ema(close[1], emaFastLength))
    _emaSlowSlope = request.security(syminfo.tickerid, _tf, ta.ema(close, emaSlowLength) - ta.ema(close[1], emaSlowLength))
    _diff = math.abs(_emaFast - _emaSlow)
    _diffPct = _diff / close
    up = _emaFast > _emaSlow and _emaFastSlope > 0 and _emaSlowSlope > 0 and _diffPct > neutralThreshold
    down = _emaFast < _emaSlow and _emaFastSlope < 0 and _emaSlowSlope < 0 and _diffPct > neutralThreshold
    up ? "UPTREND" : down ? "DOWNTREND" : "NEUTRAL"

trendM15 = f_tfTrend("15")
trendM30 = f_tfTrend("30")
trendH1 = f_tfTrend("60")

// Crossover signals
buySignal = ta.crossover(emaFast, emaSlow)
sellSignal = ta.crossunder(emaFast, emaSlow)
neutralSignal = isNeutral and not isNeutral[1]

// Offset calculation
atr = ta.atr(14)
candleRange = high - low
// Dynamic offset: interpolate between dynMin and dynMax based on candle size (relative to 20-bar ATR)
atr20 = ta.atr(20)
dynOffset = close * (dynMin/100 + (dynMax-dynMin)/100 * math.min(1, candleRange/(2*atr20)))
labelOffset = offsetType == "ATR" ? atr * offsetATRmult : offsetType == "% of price" ? close * offsetPct / 100 : dynOffset

// Trend tracking
var int currentTrendId = 0
var int trendStartBar = na
var string trendDirection = na
var bool inTrend = false
trendBars = inTrend ? (bar_index - trendStartBar) : 0

// Store PEAK info per trend
var float peakValue = na
var int peakBar = na

// --- Minimalistické čárkované čáry od labelu ke knotu ---
// Offset pro čáru (malý, aby se nedotýkala knotu)
lineOffset = atr * 0.1

// Funkce pro kreslení čáry
f_drawLine(_bar, _y1, _y2, _color) =>
    line.new(_bar, _y1, _bar, _y2, color=_color, width=1, style=line.style_dotted)

// Detect new trend and reset PEAK
if (buySignal and not inTrend)
    currentTrendId := currentTrendId + 1
    trendStartBar := bar_index
    trendDirection := "UP"
    inTrend := true
    peakValue := high
    peakBar := bar_index
    labelY = low - labelOffset
    label.new(bar_index, labelY, text="BUY\nID: " + str.tostring(currentTrendId), color=color.green, style=label.style_label_up, textcolor=color.white)
    f_drawLine(bar_index, labelY, low + lineOffset, color.green)
if (sellSignal and not inTrend)
    currentTrendId := currentTrendId + 1
    trendStartBar := bar_index
    trendDirection := "DOWN"
    inTrend := true
    peakValue := low
    peakBar := bar_index
    labelY = high + labelOffset
    label.new(bar_index, labelY, text="SELL\nID: " + str.tostring(currentTrendId), color=color.red, style=label.style_label_down, textcolor=color.white)
    f_drawLine(bar_index, labelY, high - lineOffset, color.red)
if (neutralSignal and not inTrend)
    currentTrendId := currentTrendId + 1
    trendStartBar := bar_index
    trendDirection := "NEUTRAL"
    inTrend := true
    peakValue := na
    peakBar := na
    // Umístění nad high + offset
    labelY = high + labelOffset
    label.new(bar_index, labelY, text="NEUTRAL\nID: " + str.tostring(currentTrendId), color=color.gray, style=label.style_label_left, textcolor=color.white)
    f_drawLine(bar_index, labelY, high - lineOffset, color.gray)

// Update PEAK during trend
if inTrend and trendDirection == "UP" and high > peakValue
    peakValue := high
    peakBar := bar_index
if inTrend and trendDirection == "DOWN" and (na(peakValue) or low < peakValue)
    peakValue := low
    peakBar := bar_index

// End detection: opposite crossover or switch to neutral
trendEnd = (inTrend and trendDirection == "UP" and (sellSignal or neutralSignal)) or (inTrend and trendDirection == "DOWN" and (buySignal or neutralSignal)) or (inTrend and trendDirection == "NEUTRAL" and (buySignal or sellSignal))

// Draw PEAK and END labels, avoid overlap if on same bar
if (trendEnd and trendBars >= minTrendBars)
    sameBar = not na(peakBar) and peakBar == bar_index
    if showPeakLabels and not na(peakBar)
        peakY = trendDirection == "UP" ? peakValue + (sameBar ? 2*labelOffset : labelOffset) : trendDirection == "DOWN" ? peakValue - (sameBar ? 2*labelOffset : labelOffset) : close
        label.new(peakBar, peakY, text="PEAK\nID: " + str.tostring(currentTrendId), color=color.yellow, style=label.style_label_down, textcolor=color.black, size=size.small)
        // Čára od PEAK labelu ke knotu
        peakLineY = trendDirection == "UP" ? peakValue - lineOffset : peakValue + lineOffset
        f_drawLine(peakBar, peakY, peakLineY, color.yellow)
    endY = trendDirection == "UP" ? high + (sameBar ? 4*labelOffset : 3*labelOffset) : trendDirection == "DOWN" ? low - (sameBar ? 4*labelOffset : 2*labelOffset) : high + labelOffset
    label.new(bar_index, endY, text="END\nID: " + str.tostring(currentTrendId), color=color.gray, style=label.style_label_down, textcolor=color.white)
    // Čára od END labelu ke knotu
    endLineY = trendDirection == "UP" ? high - lineOffset : trendDirection == "DOWN" ? low + lineOffset : high - lineOffset
    f_drawLine(bar_index, endY, endLineY, color.gray)
    inTrend := false
    trendDirection := na
    trendStartBar := na
    peakValue := na
    peakBar := na

// Plotting
plot(emaFast, "Fast EMA", color=color.blue, linewidth=2)
plot(emaSlow, "Slow EMA", color=color.red, linewidth=2)

// Background color for trend
trendColor = inTrend ? (trendDirection == "UP" ? color.new(color.green, 90) : trendDirection == "DOWN" ? color.new(color.red, 90) : color.new(color.gray, 90)) : na
bgcolor(trendColor)

// Robust timeframe label for table
// Use only timeframe.period for maximum compatibility

tfLabel = str.tostring(timeframe.period)

// Table colors for readability
f_trendColor(trend) =>
    trend == "UPTREND" ? color.new(color.green, 80) : trend == "DOWNTREND" ? color.new(color.red, 80) : color.new(color.gray, 80)
f_textColor(trend) =>
    color.white

// Trend status table (multi-timeframe)
var table infoTable = table.new(position.top_right, 2, 10, border_width=1)
// --- Table values and colors (declare before if block!) ---
tfTrend = inTrend ? (trendDirection == "UP" ? "UPTREND" : trendDirection == "DOWN" ? "DOWNTREND" : "NEUTRAL") : "NO TREND"
tfTrendColor = f_trendColor(tfTrend)
tfTrendTextColor = f_textColor(tfTrend)
m15Color = f_trendColor(trendM15)
m15TextColor = f_textColor(trendM15)
m30Color = f_trendColor(trendM30)
m30TextColor = f_textColor(trendM30)
h1Color = f_trendColor(trendH1)
h1TextColor = f_textColor(trendH1)
peakLabelText = showPeakLabels ? "ON" : "OFF"
peakLabelBg = showPeakLabels ? color.new(color.yellow, 80) : color.new(color.gray, 80)
peakLabelTextColor = color.black
offsetTypeBg = color.new(color.gray, 90)
offsetTypeTextColor = color.white

// --- ALERTS ---
alertcondition(buySignal, title="BUY Alert", message="BUY signal detected")
alertcondition(sellSignal, title="SELL Alert", message="SELL signal detected")

// --- TREND STRENGTH ---
trendStrength = diffPct * 100  // in percent
trendStrengthText = trendStrength > 1 ? "Silný" : trendStrength > 0.3 ? "Střední" : trendStrength > 0.1 ? "Slabý" : "Žádný"
trendStrengthTextEN = trendStrength > 1 ? "Strong" : trendStrength > 0.3 ? "Medium" : trendStrength > 0.1 ? "Weak" : "None"

// --- STATISTICS ---
var int buyCount = 0
var int sellCount = 0
var int trendTotalLength = 0
var int trendCount = 0

if buySignal and not inTrend
    buyCount += 1
if sellSignal and not inTrend
    sellCount += 1
if trendEnd and trendBars >= minTrendBars
    trendTotalLength += trendBars
    trendCount += 1
avgTrendLength = trendCount > 0 ? math.round(trendTotalLength / trendCount) : na

// --- TREND ZONE BACKGROUND ---
var int trendZoneStart = na
var int trendZoneEnd = na
var string trendZoneType = na
if buySignal and not inTrend
    trendZoneStart := bar_index
    trendZoneType := "UP"
if sellSignal and not inTrend
    trendZoneStart := bar_index
    trendZoneType := "DOWN"
if neutralSignal and not inTrend
    trendZoneStart := bar_index
    trendZoneType := "NEUTRAL"
if trendEnd and trendBars >= minTrendBars
    trendZoneEnd := bar_index
    // Color the background for the whole trend zone
    zoneColor = trendZoneType == "UP" ? color.new(color.green, 90) : trendZoneType == "DOWN" ? color.new(color.red, 90) : color.new(color.gray, 90)
    if not na(trendZoneStart)
        var box trendBox = na
        trendBox := box.new(left=trendZoneStart, top=high*100, right=trendZoneEnd, bottom=low/100, bgcolor=zoneColor, border_color=na)
    trendZoneStart := na
    trendZoneEnd := na
    trendZoneType := na

if barstate.islast
    table.cell(infoTable, 0, 0, "TF", bgcolor=color.new(color.blue, 80), text_color=color.white)
    table.cell(infoTable, 1, 0, "Trend", bgcolor=color.new(color.blue, 80), text_color=color.white)
    table.cell(infoTable, 0, 1, tfLabel, bgcolor=color.new(color.gray, 90), text_color=color.white)
    table.cell(infoTable, 1, 1, tfTrend, bgcolor=tfTrendColor, text_color=tfTrendTextColor)
    table.cell(infoTable, 0, 2, "M15", bgcolor=color.new(color.gray, 90), text_color=color.white)
    table.cell(infoTable, 1, 2, trendM15, bgcolor=m15Color, text_color=m15TextColor)
    table.cell(infoTable, 0, 3, "M30", bgcolor=color.new(color.gray, 90), text_color=color.white)
    table.cell(infoTable, 1, 3, trendM30, bgcolor=m30Color, text_color=m30TextColor)
    table.cell(infoTable, 0, 4, "H1", bgcolor=color.new(color.gray, 90), text_color=color.white)
    table.cell(infoTable, 1, 4, trendH1, bgcolor=h1Color, text_color=h1TextColor)
    table.cell(infoTable, 0, 5, "PEAK labels", bgcolor=color.new(color.blue, 80), text_color=color.white)
    table.cell(infoTable, 1, 5, peakLabelText, bgcolor=peakLabelBg, text_color=peakLabelTextColor)
    table.cell(infoTable, 0, 6, "Offset type", bgcolor=color.new(color.blue, 80), text_color=color.white)
    table.cell(infoTable, 1, 6, offsetType, bgcolor=offsetTypeBg, text_color=offsetTypeTextColor)
    // Trend strength
    table.cell(infoTable, 0, 7, "Síla trendu", bgcolor=color.new(color.blue, 80), text_color=color.white)
    table.cell(infoTable, 1, 7, str.tostring(trendStrength, "#.##") + "% (" + trendStrengthText + "/" + trendStrengthTextEN + ")", bgcolor=color.new(color.gray, 90), text_color=color.white)
    // Statistics
    table.cell(infoTable, 0, 8, "BUY/SELL", bgcolor=color.new(color.blue, 80), text_color=color.white)
    table.cell(infoTable, 1, 8, str.tostring(buyCount) + "/" + str.tostring(sellCount), bgcolor=color.new(color.gray, 90), text_color=color.white)
    table.cell(infoTable, 0, 9, "Prům. délka", bgcolor=color.new(color.blue, 80), text_color=color.white)
    table.cell(infoTable, 1, 9, na(avgTrendLength) ? "-" : str.tostring(avgTrendLength) + " svíček", bgcolor=color.new(color.gray, 90), text_color=color.white) 